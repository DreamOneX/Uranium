--- ../src-base/minecraft/cpw/mods/fml/common/eventhandler/EventBus.java
+++ ../src-work/minecraft/cpw/mods/fml/common/eventhandler/EventBus.java
@@ -3,6 +3,7 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
@@ -19,6 +20,8 @@
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
+import net.minecraft.server.MinecraftServer;
+import net.minecraftforge.common.MinecraftForge;
 
 public class EventBus implements IEventExceptionHandler
 {
@@ -129,8 +132,25 @@
         }
     }
 
+    public java.util.HashMap<Class,Integer> mEventStackDeep=new HashMap<Class,Integer>();
+
     public boolean post(Event event)
     {
+        Boolean tEnable = MinecraftServer.uraniumConfig==null?Boolean.FALSE:MinecraftServer.uraniumConfig.enableEndlessLoopCheck.getValue();
+        if (tEnable && this == MinecraftForge.EVENT_BUS) {
+            // not handle async
+            Class<? extends Event> tClazz = event.getClass();
+            Integer tDeep = this.mEventStackDeep.get(tClazz);
+            if (tDeep != null && tDeep > MinecraftServer.uraniumConfig.endlessLoopCheckDeep.getValue()) {
+                if (event.isCancelable()) {
+                    event.setCanceled(true);
+                    return true;
+                }
+                return false;
+            }
+            this.mEventStackDeep.put(tClazz, tDeep==null?1:++tDeep);
+        }
+
         IEventListener[] listeners = event.getListenerList().getListeners(busID);
         int index = 0;
         try
@@ -144,6 +164,15 @@
         {
             exceptionHandler.handleException(this, event, listeners, index, throwable);
             Throwables.propagate(throwable);
+        } finally {
+            if(tEnable) {
+                Class<? extends Event> tClazz = event.getClass();
+                Integer tCount = this.mEventStackDeep.remove(tClazz);
+                if(tCount!=null){
+                    tCount--;
+                    if(tCount>0) this.mEventStackDeep.put(tClazz, tCount);
+                }
+            }
         }
         return (event.isCancelable() ? event.isCanceled() : false);
     }
