--- ../src-base/minecraft/cpw/mods/fml/common/network/internal/HandshakeCompletionHandler.java
+++ ../src-work/minecraft/cpw/mods/fml/common/network/internal/HandshakeCompletionHandler.java
@@ -8,13 +8,29 @@
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.channel.ChannelHandler.Sharable;
 
+import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
 @Sharable
 public class HandshakeCompletionHandler extends SimpleChannelInboundHandler<FMLMessage.CompleteHandshake> {
+    private ExecutorService pool= Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
     @Override
-    protected void channelRead0(ChannelHandlerContext ctx, CompleteHandshake msg) throws Exception
+    protected void channelRead0(ChannelHandlerContext ctx, final CompleteHandshake msg) throws Exception
     {
-        NetworkDispatcher dispatcher = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).getAndRemove();
-        dispatcher.completeHandshake(msg.target);
+        // Cauldron start - attempt to fix race condition with attr being null
+        io.netty.util.Attribute<NetworkDispatcher> attr = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER);
+        if (attr != null)
+        {
+            final NetworkDispatcher dispatcher = attr.getAndRemove();
+            if (dispatcher != null) pool.execute(new Runnable() {
+                @Override
+                public void run() {
+                    dispatcher.completeHandshake(msg.target);
+                }
+            });
+        }
+        // Cauldron end
     }
 
     @Override
